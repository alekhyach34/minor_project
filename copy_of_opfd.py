# -*- coding: utf-8 -*-
"""Copy of OPFD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UeXdw76mH6_W9TW3cqMAiGay9uVqjqZu
"""

#Importing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import model_selection
from sklearn import preprocessing
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.ensemble import BaggingClassifier

#Importing dataset
df = pd.read_csv('/content/drive/MyDrive/fraud_detection_dataset.csv')

#Data Information
df.head(10)

print("Shape of the datacolumn: ",df.shape)
df.isna().sum()

df.info()

df.describe()

df.dtypes

df.notnull().sum()

df['Fraudulent'].value_counts()

df.shape

df.size

df.duplicated()

df.dropna()

df.columns

df.describe(include=object)

# Get the distinct values of each column
for column in df.columns:
    unique_val=df[column].unique()
    print("unique values of {} are {}".format(column,unique_val))

#Filtering rows based on the presence of null values using the dropna() method:
filtered_dropna = df.dropna(axis=0) # default axis value is zero ==> rows with missing values are deleted
print("Total records Before:" , df.shape)
print("Total records After:" , filtered_dropna.shape)

#Filtering rows based on the presence of null values using the dropna() method:

filtered_dropna_2 = df.dropna(axis=1) # ==> columns with missing values are deleted

print("Total records Before:" , df.shape)
print("Total records After:" , filtered_dropna_2.shape)

dup_test = df[df.duplicated()]
dup_test.shape

# Filter rows based on condition'Transaction_Amount' >= 800
filtered_Transaction_Amount = df[df['Transaction_Amount'] >=800 ]
print("Total records:", len(filtered_Transaction_Amount))
filtered_Transaction_Amount.head()

# Filter rows where 'Customer_Name' startswith 'J'
name_inc=df[df["Customer_Name"].str.startswith("J")]
name_inc

#all columns
cols3=df.loc[0:6, :]
cols3

# Filering specific columns

subset_data = df[['Transaction_ID', 'Customer_Name', 'Transaction_Amount', 'Transaction_Type']]
subset_data

# Accessing specific rows and columns using iloc
# Select the first three rows and the first two columns
rows_and_cols=df.iloc[0:3,0:2]
rows_and_cols

#unique Card_CVV
df["Card_CVV"]

unique_Card_CVV=df[~df["Card_CVV"].duplicated()].loc[:,["Card_CVV"]]

unique_Card_CVV

#top 10 Transaction_Amount values
temp=df[df["Transaction_Amount"].rank(ascending=False)<=10].loc[:,'Transaction_ID':'Transaction_Date']
temp

filterd_num=df.select_dtypes(include='int').iloc[0:5,:]
filterd_num

filterd_num=df.select_dtypes(include='number').iloc[0:5,:]
filterd_num

filterd_obj=df.select_dtypes(include='object').iloc[0:4,:]
filterd_obj

filterd_obj=df.select_dtypes(include='float').iloc[0:4,:]
filterd_obj

# Create new variable : Transaction using Transaction_Amount
df["Transaction"]=-round(df['Transaction_Amount']+25,0)
df.head()

#now delete Nincolumn
df.drop('Transaction', axis=1,inplace=True)

df=df.dropna(axis=0)
print(df.shape)

"""**EDA-Exploratory data analysis**"""

sns.countplot(x='Transaction_Type', data=df)

sns.countplot(x='Device_Type', data=df)

sns.countplot(x='Fraudulent', data=df)

